#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Soluci√≥n Autom√°tica para el Sistema de Dep√≥sitos
Configura autom√°ticamente todos los componentes necesarios
"""

import os
import sys
import json
import requests
import subprocess
from datetime import datetime
from dotenv import load_dotenv, set_key

# Cargar variables de entorno
load_dotenv()

class SolucionAutomatica:
    def __init__(self):
        self.env_file = '.env'
        self.pasos_completados = []
        self.errores = []
        
    def paso_1_configurar_webhook_url(self):
        """Paso 1: Configurar URL del webhook usando ngrok"""
        print("\nüîó PASO 1: CONFIGURAR URL DEL WEBHOOK")
        print("=" * 50)
        
        try:
            # Verificar si ngrok est√° instalado
            result = subprocess.run(['ngrok', 'version'], capture_output=True, text=True)
            if result.returncode != 0:
                print("‚ùå ngrok no est√° instalado")
                print("üì• Descarga ngrok desde: https://ngrok.com/download")
                print("üí° Despu√©s de instalar, ejecuta este script nuevamente")
                return False
                
            print("‚úÖ ngrok est√° instalado")
            
            # Verificar si ya hay un t√∫nel ngrok activo
            try:
                response = requests.get('http://localhost:4040/api/tunnels', timeout=5)
                if response.status_code == 200:
                    tunnels = response.json().get('tunnels', [])
                    
                    for tunnel in tunnels:
                        if tunnel.get('proto') == 'https' and '5000' in tunnel.get('config', {}).get('addr', ''):
                            webhook_url = tunnel['public_url'] + '/api/webhook/helius'
                            print(f"‚úÖ T√∫nel ngrok activo encontrado: {webhook_url}")
                            
                            # Actualizar .env
                            set_key(self.env_file, 'WEBHOOK_URL', webhook_url)
                            print(f"‚úÖ WEBHOOK_URL actualizada en {self.env_file}")
                            
                            self.pasos_completados.append("Configuraci√≥n de WEBHOOK_URL")
                            return True
                            
            except requests.exceptions.ConnectionError:
                pass
                
            # Si no hay t√∫nel activo, mostrar instrucciones
            print("‚ö†Ô∏è No se encontr√≥ t√∫nel ngrok activo")
            print("\nüìã INSTRUCCIONES PARA CONFIGURAR NGROK:")
            print("1. Abrir una nueva terminal")
            print("2. Ejecutar: ngrok http 5000")
            print("3. Copiar la URL HTTPS que aparece (ej: https://abc123.ngrok.io)")
            print("4. Ejecutar este script nuevamente")
            
            # Opci√≥n manual
            print("\nüîß CONFIGURACI√ìN MANUAL:")
            webhook_url = input("Ingresa la URL del webhook (o presiona Enter para omitir): ").strip()
            
            if webhook_url and webhook_url.startswith('https://'):
                if not webhook_url.endswith('/api/webhook/helius'):
                    webhook_url += '/api/webhook/helius'
                    
                set_key(self.env_file, 'WEBHOOK_URL', webhook_url)
                print(f"‚úÖ WEBHOOK_URL configurada: {webhook_url}")
                self.pasos_completados.append("Configuraci√≥n manual de WEBHOOK_URL")
                return True
            else:
                print("‚è≠Ô∏è Omitiendo configuraci√≥n de webhook por ahora")
                return False
                
        except Exception as e:
            self.errores.append(f"Error en paso 1: {e}")
            print(f"‚ùå Error: {e}")
            return False
            
    def paso_2_configurar_clave_privada(self):
        """Paso 2: Configurar clave privada custodial"""
        print("\nüîê PASO 2: CONFIGURAR CLAVE PRIVADA CUSTODIAL")
        print("=" * 50)
        
        current_key = os.getenv('CUSTODIAL_PRIVATE_KEY')
        if current_key and current_key != 'YOUR_CUSTODIAL_PRIVATE_KEY_BASE58_HERE':
            print("‚úÖ CUSTODIAL_PRIVATE_KEY ya est√° configurada")
            self.pasos_completados.append("Clave privada ya configurada")
            return True
            
        print("‚ö†Ô∏è CUSTODIAL_PRIVATE_KEY no est√° configurada")
        print("\nüìã INSTRUCCIONES:")
        print("1. Esta clave debe corresponder a la direcci√≥n custodial:")
        print(f"   {os.getenv('CUSTODIAL_ADDRESS')}")
        print("2. La clave debe estar en formato Base58")
        print("3. ‚ö†Ô∏è NUNCA compartir esta clave con nadie")
        
        print("\nüîß OPCIONES:")
        print("1. Configurar clave privada manualmente")
        print("2. Omitir por ahora (el sistema funcionar√° parcialmente)")
        
        opcion = input("Selecciona una opci√≥n (1/2): ").strip()
        
        if opcion == '1':
            private_key = input("Ingresa la clave privada Base58: ").strip()
            
            if len(private_key) > 40:  # Validaci√≥n b√°sica
                set_key(self.env_file, 'CUSTODIAL_PRIVATE_KEY', private_key)
                print("‚úÖ CUSTODIAL_PRIVATE_KEY configurada")
                self.pasos_completados.append("Configuraci√≥n de clave privada")
                return True
            else:
                print("‚ùå Clave privada inv√°lida (muy corta)")
                return False
        else:
            print("‚è≠Ô∏è Omitiendo configuraci√≥n de clave privada")
            print("üí° El sistema podr√° recibir dep√≥sitos pero no procesar retiros")
            return False
            
    def paso_3_configurar_webhook_helius(self):
        """Paso 3: Configurar webhook en Helius"""
        print("\n‚öôÔ∏è PASO 3: CONFIGURAR WEBHOOK EN HELIUS")
        print("=" * 50)
        
        webhook_url = os.getenv('WEBHOOK_URL')
        if not webhook_url or webhook_url == 'https://tu-dominio.com/webhook':
            print("‚ùå WEBHOOK_URL no configurada. Completar Paso 1 primero.")
            return False
            
        try:
            # Verificar que el servidor local est√© ejecut√°ndose
            response = requests.get('http://localhost:5000/api/webhook/status', timeout=5)
            if response.status_code != 200:
                print("‚ùå Servidor Flask no est√° ejecut√°ndose")
                print("üí° Ejecutar 'python app.py' en otra terminal")
                return False
                
            print("‚úÖ Servidor Flask est√° ejecut√°ndose")
            
            # Configurar webhook usando la API local
            webhook_data = {
                'webhook_url': webhook_url
            }
            
            response = requests.post(
                'http://localhost:5000/api/webhook/setup',
                json=webhook_data,
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ Webhook configurado en Helius")
                print(f"   URL: {result.get('webhook_url')}")
                print(f"   Direcci√≥n monitoreada: {result.get('monitored_address')}")
                
                self.pasos_completados.append("Configuraci√≥n de webhook en Helius")
                return True
            else:
                error_data = response.json()
                print(f"‚ùå Error configurando webhook: {error_data.get('error')}")
                return False
                
        except requests.exceptions.ConnectionError:
            print("‚ùå No se puede conectar al servidor Flask")
            print("üí° Aseg√∫rate de que 'python app.py' est√© ejecut√°ndose")
            return False
        except Exception as e:
            self.errores.append(f"Error en paso 3: {e}")
            print(f"‚ùå Error: {e}")
            return False
            
    def paso_4_probar_sistema(self):
        """Paso 4: Probar el sistema completo"""
        print("\nüß™ PASO 4: PROBAR EL SISTEMA")
        print("=" * 50)
        
        try:
            # Verificar estado del sistema
            response = requests.get('http://localhost:5000/api/webhook/status', timeout=5)
            if response.status_code == 200:
                status = response.json()
                
                print("üìä ESTADO DEL SISTEMA:")
                print(f"   Webhook configurado: {'‚úÖ' if status.get('webhook_configured') else '‚ùå'}")
                print(f"   Helius disponible: {'‚úÖ' if status.get('helius_available') else '‚ùå'}")
                print(f"   Direcci√≥n custodial: {status.get('custodial_address')}")
                
                if status.get('webhook_configured') and status.get('helius_available'):
                    print("\nüéâ ¬°SISTEMA COMPLETAMENTE CONFIGURADO!")
                    print("\nüìã PR√ìXIMOS PASOS:")
                    print("1. Enviar una transacci√≥n de prueba peque√±a (0.001 SOL)")
                    print("2. Verificar que se procese autom√°ticamente")
                    print("3. Revisar los logs del servidor para confirmar")
                    
                    self.pasos_completados.append("Verificaci√≥n del sistema")
                    return True
                else:
                    print("‚ö†Ô∏è Sistema parcialmente configurado")
                    return False
            else:
                print("‚ùå No se puede verificar el estado del sistema")
                return False
                
        except Exception as e:
            self.errores.append(f"Error en paso 4: {e}")
            print(f"‚ùå Error: {e}")
            return False
            
    def generar_reporte_final(self):
        """Genera un reporte final de la configuraci√≥n"""
        print("\nüìä REPORTE FINAL DE CONFIGURACI√ìN")
        print("=" * 50)
        
        print(f"\n‚úÖ PASOS COMPLETADOS ({len(self.pasos_completados)}):")
        for i, paso in enumerate(self.pasos_completados, 1):
            print(f"{i}. {paso}")
            
        if self.errores:
            print(f"\n‚ùå ERRORES ENCONTRADOS ({len(self.errores)}):")
            for i, error in enumerate(self.errores, 1):
                print(f"{i}. {error}")
                
        # Estado final
        webhook_url = os.getenv('WEBHOOK_URL')
        private_key = os.getenv('CUSTODIAL_PRIVATE_KEY')
        
        configuracion_completa = (
            webhook_url and webhook_url != 'https://tu-dominio.com/webhook' and
            private_key and private_key != 'YOUR_CUSTODIAL_PRIVATE_KEY_BASE58_HERE'
        )
        
        if configuracion_completa:
            print("\nüéâ ¬°CONFIGURACI√ìN COMPLETA!")
            print("El sistema est√° listo para procesar dep√≥sitos autom√°ticamente.")
        else:
            print("\n‚ö†Ô∏è CONFIGURACI√ìN PARCIAL")
            print("El sistema funcionar√° con limitaciones.")
            
        # Guardar reporte
        reporte = {
            'timestamp': datetime.now().isoformat(),
            'pasos_completados': self.pasos_completados,
            'errores': self.errores,
            'configuracion_completa': configuracion_completa,
            'webhook_url': webhook_url,
            'tiene_clave_privada': private_key != 'YOUR_CUSTODIAL_PRIVATE_KEY_BASE58_HERE'
        }
        
        with open('solucion_reporte.json', 'w', encoding='utf-8') as f:
            json.dump(reporte, f, indent=2, ensure_ascii=False)
            
        print(f"\nüíæ Reporte guardado en: solucion_reporte.json")
        
    def ejecutar_solucion_completa(self):
        """Ejecuta la soluci√≥n completa paso a paso"""
        print("üõ†Ô∏è SOLUCI√ìN AUTOM√ÅTICA DEL SISTEMA DE DEP√ìSITOS")
        print("=" * 60)
        print(f"Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 60)
        
        print("\nüìã PASOS A EJECUTAR:")
        print("1. Configurar URL del webhook (ngrok)")
        print("2. Configurar clave privada custodial")
        print("3. Configurar webhook en Helius")
        print("4. Probar el sistema completo")
        
        input("\nPresiona Enter para continuar...")
        
        # Ejecutar pasos
        self.paso_1_configurar_webhook_url()
        self.paso_2_configurar_clave_privada()
        self.paso_3_configurar_webhook_helius()
        self.paso_4_probar_sistema()
        
        # Generar reporte final
        self.generar_reporte_final()
        
if __name__ == '__main__':
    solucion = SolucionAutomatica()
    solucion.ejecutar_solucion_completa()