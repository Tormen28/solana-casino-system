#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Soluci√≥n Final para el Sistema de Dep√≥sitos
Configura el sistema para funcionar localmente y proporciona gu√≠a completa
"""

import os
import sys
import json
import requests
from datetime import datetime
from dotenv import load_dotenv, set_key

# Cargar variables de entorno
load_dotenv()

class SolucionFinal:
    def __init__(self):
        self.env_file = '.env'
        
    def verificar_estado_actual(self):
        """Verifica el estado actual del sistema"""
        print("üîç VERIFICANDO ESTADO ACTUAL DEL SISTEMA")
        print("=" * 50)
        
        # Variables de entorno
        helius_key = os.getenv('HELIUS_API_KEY')
        custodial_address = os.getenv('CUSTODIAL_ADDRESS')
        custodial_key = os.getenv('CUSTODIAL_PRIVATE_KEY')
        webhook_url = os.getenv('WEBHOOK_URL')
        
        estado = {
            'helius_api_key': bool(helius_key and helius_key != 'your_helius_api_key_here'),
            'custodial_address': bool(custodial_address),
            'custodial_private_key': bool(custodial_key and custodial_key != 'YOUR_CUSTODIAL_PRIVATE_KEY_BASE58_HERE'),
            'webhook_url': bool(webhook_url and webhook_url != 'https://tu-dominio.com/webhook'),
            'servidor_flask': self.verificar_servidor_flask()
        }
        
        print("üìä COMPONENTES DEL SISTEMA:")
        for componente, configurado in estado.items():
            status = "‚úÖ" if configurado else "‚ùå"
            nombre = componente.replace('_', ' ').title()
            print(f"  {status} {nombre}")
            
        configurados = sum(estado.values())
        total = len(estado)
        porcentaje = (configurados / total) * 100
        
        print(f"\nüìà Configuraci√≥n: {porcentaje:.0f}% completa ({configurados}/{total})")
        
        return estado, porcentaje
        
    def verificar_servidor_flask(self):
        """Verifica si Flask est√° ejecut√°ndose"""
        try:
            response = requests.get('http://localhost:5000/api/webhook/status', timeout=3)
            return response.status_code == 200
        except:
            return False
            
    def configurar_para_desarrollo(self):
        """Configura el sistema para desarrollo local"""
        print("\nüîß CONFIGURANDO PARA DESARROLLO LOCAL")
        print("=" * 50)
        
        # Configurar webhook URL para desarrollo
        webhook_url = "http://localhost:5000/api/webhook/helius"
        set_key(self.env_file, 'WEBHOOK_URL', webhook_url)
        print(f"‚úÖ WEBHOOK_URL configurada para desarrollo: {webhook_url}")
        
        # Verificar otras configuraciones
        custodial_key = os.getenv('CUSTODIAL_PRIVATE_KEY')
        if custodial_key == 'YOUR_CUSTODIAL_PRIVATE_KEY_BASE58_HERE':
            print("‚ö†Ô∏è CUSTODIAL_PRIVATE_KEY a√∫n no configurada")
            print("   Esta es necesaria para procesar retiros autom√°ticos")
            
        return True
        
    def probar_procesamiento_manual(self):
        """Prueba el procesamiento manual de dep√≥sitos"""
        print("\nüß™ PROBANDO PROCESAMIENTO MANUAL")
        print("=" * 50)
        
        # Verificar que existe el script de procesamiento manual
        if os.path.exists('process_deposit.py'):
            print("‚úÖ Script de procesamiento manual disponible")
            print("üí° Puedes usar 'python process_deposit.py' para procesar dep√≥sitos manualmente")
        else:
            print("‚ùå Script de procesamiento manual no encontrado")
            
        # Verificar base de datos
        try:
            import sqlite3
            conn = sqlite3.connect('casino.db')
            cursor = conn.cursor()
            
            # Verificar tablas
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tablas = [row[0] for row in cursor.fetchall()]
            
            if 'user_transactions' in tablas and 'user_profiles' in tablas:
                print("‚úÖ Base de datos configurada correctamente")
                
                # Mostrar estad√≠sticas
                cursor.execute("SELECT COUNT(*) FROM user_profiles")
                usuarios = cursor.fetchone()[0]
                
                cursor.execute("SELECT COUNT(*) FROM user_transactions")
                transacciones = cursor.fetchone()[0]
                
                print(f"üìä Usuarios registrados: {usuarios}")
                print(f"üìä Transacciones registradas: {transacciones}")
            else:
                print("‚ùå Tablas de base de datos no encontradas")
                
            conn.close()
            
        except Exception as e:
            print(f"‚ùå Error verificando base de datos: {e}")
            
    def generar_guia_completa(self, estado):
        """Genera una gu√≠a completa para usar el sistema"""
        print("\n" + "=" * 60)
        print("üìö GU√çA COMPLETA DEL SISTEMA")
        print("=" * 60)
        
        print("\nüéØ ESTADO ACTUAL:")
        if estado['helius_api_key'] and estado['custodial_address'] and estado['servidor_flask']:
            print("‚úÖ Sistema base configurado y funcionando")
            print("‚úÖ Puede recibir y procesar dep√≥sitos")
            
            if estado['custodial_private_key']:
                print("‚úÖ Puede procesar retiros autom√°ticamente")
            else:
                print("‚ö†Ô∏è Retiros requieren configuraci√≥n adicional")
                
            if estado['webhook_url']:
                print("‚úÖ Webhooks configurados (desarrollo)")
            else:
                print("‚ö†Ô∏è Webhooks requieren configuraci√≥n")
        else:
            print("‚ùå Sistema requiere configuraci√≥n adicional")
            
        print("\nüîÑ C√ìMO FUNCIONA ACTUALMENTE:")
        print("1. DEP√ìSITOS MANUALES:")
        print("   ‚Ä¢ Usar: python process_deposit.py")
        print("   ‚Ä¢ Procesa transacciones pendientes")
        print("   ‚Ä¢ Actualiza balances autom√°ticamente")
        
        print("\n2. DEP√ìSITOS AUTOM√ÅTICOS (requiere configuraci√≥n):")
        print("   ‚Ä¢ Instalar ngrok: https://ngrok.com/download")
        print("   ‚Ä¢ Ejecutar: ngrok http 5000")
        print("   ‚Ä¢ Configurar WEBHOOK_URL con la URL de ngrok")
        print("   ‚Ä¢ El sistema procesar√° dep√≥sitos autom√°ticamente")
        
        print("\n3. RETIROS (requiere clave privada):")
        print("   ‚Ä¢ Configurar CUSTODIAL_PRIVATE_KEY en .env")
        print("   ‚Ä¢ El sistema procesar√° retiros autom√°ticamente")
        
        print("\nüõ†Ô∏è PASOS PARA CONFIGURACI√ìN COMPLETA:")
        
        if not estado['custodial_private_key']:
            print("\nüîê PASO 1: Configurar Clave Privada Custodial")
            print("   1. Abrir archivo .env")
            print("   2. Buscar: CUSTODIAL_PRIVATE_KEY=YOUR_CUSTODIAL_PRIVATE_KEY_BASE58_HERE")
            print("   3. Reemplazar con la clave privada real")
            print("   4. Guardar archivo")
            print("   ‚ö†Ô∏è CR√çTICO: Sin esta clave no se pueden procesar retiros")
            
        print("\nüåê PASO 2: Configurar Webhooks Autom√°ticos (Opcional)")
        print("   1. Descargar ngrok: https://ngrok.com/download")
        print("   2. Instalar ngrok")
        print("   3. Ejecutar: ngrok http 5000")
        print("   4. Copiar URL HTTPS (ej: https://abc123.ngrok.io)")
        print("   5. Actualizar WEBHOOK_URL en .env")
        print("   6. Reiniciar servidor Flask")
        print("   üí° Esto permite dep√≥sitos autom√°ticos en tiempo real")
        
        print("\nüß™ PASO 3: Probar el Sistema")
        print("   1. Enviar 0.001 SOL a la direcci√≥n custodial:")
        print(f"      {os.getenv('CUSTODIAL_ADDRESS')}")
        print("   2. Si webhooks est√°n configurados: esperar ~30 segundos")
        print("   3. Si no: ejecutar 'python process_deposit.py'")
        print("   4. Verificar que se agregaron chips al balance")
        
        print("\nüìÅ ARCHIVOS IMPORTANTES:")
        archivos = {
            '.env': 'Configuraci√≥n del sistema',
            'app.py': 'Servidor principal Flask',
            'process_deposit.py': 'Procesamiento manual de dep√≥sitos',
            'casino.db': 'Base de datos SQLite',
            'configuracion_reporte.json': '√öltimo reporte de configuraci√≥n'
        }
        
        for archivo, descripcion in archivos.items():
            existe = "‚úÖ" if os.path.exists(archivo) else "‚ùå"
            print(f"   {existe} {archivo} - {descripcion}")
            
        print("\nüîß COMANDOS √öTILES:")
        comandos = [
            "python app.py - Iniciar servidor principal",
            "python process_deposit.py - Procesar dep√≥sitos manualmente",
            "curl http://localhost:5000/api/webhook/status - Ver estado del sistema",
            "ngrok http 5000 - Crear t√∫nel p√∫blico para webhooks"
        ]
        
        for comando in comandos:
            print(f"   ‚Ä¢ {comando}")
            
    def ejecutar_solucion_final(self):
        """Ejecuta la soluci√≥n final completa"""
        print("üéØ SOLUCI√ìN FINAL DEL SISTEMA DE DEP√ìSITOS")
        print("=" * 60)
        print(f"Ejecutado: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 60)
        
        # Verificar estado actual
        estado, porcentaje = self.verificar_estado_actual()
        
        # Configurar para desarrollo
        self.configurar_para_desarrollo()
        
        # Probar procesamiento manual
        self.probar_procesamiento_manual()
        
        # Generar gu√≠a completa
        self.generar_guia_completa(estado)
        
        # Guardar reporte final
        reporte = {
            'timestamp': datetime.now().isoformat(),
            'tipo': 'solucion_final',
            'porcentaje_completitud': porcentaje,
            'estado_componentes': estado,
            'configuracion_desarrollo': True,
            'procesamiento_manual_disponible': os.path.exists('process_deposit.py'),
            'base_datos_disponible': os.path.exists('casino.db'),
            'recomendaciones': [
                'Configurar CUSTODIAL_PRIVATE_KEY para retiros autom√°ticos',
                'Instalar ngrok para webhooks autom√°ticos',
                'Probar con transacci√≥n peque√±a (0.001 SOL)'
            ]
        }
        
        with open('solucion_final_reporte.json', 'w', encoding='utf-8') as f:
            json.dump(reporte, f, indent=2, ensure_ascii=False)
            
        print(f"\nüíæ Reporte completo guardado en: solucion_final_reporte.json")
        
        # Mensaje final
        if porcentaje >= 60:
            print("\nüéâ ¬°SISTEMA FUNCIONAL!")
            print("El sistema puede procesar dep√≥sitos. Sigue la gu√≠a para configuraci√≥n completa.")
        else:
            print("\n‚ö†Ô∏è SISTEMA REQUIERE CONFIGURACI√ìN")
            print("Revisa la gu√≠a anterior para completar la configuraci√≥n.")
            
if __name__ == '__main__':
    solucion = SolucionFinal()
    solucion.ejecutar_solucion_final()